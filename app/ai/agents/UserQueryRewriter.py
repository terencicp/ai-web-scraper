from typing import Dict, Any, Optional, Tuple
from textwrap import dedent
from string import Template
from datetime import date

from app.ai.services.OpenAiRequest import OpenAiRequest
from app.ai.services.Conversation import Conversation
from app.ai.services.openai_models import Gpt4o

class UserQueryRewriter:
    """
    Agent that given a user's request, returns a dictionary that contains a description of
    the user's data needs, a URL if the user provided one, or the Google search query if not.

    Usage example:
        prompt_rewriter = PromptRewriter()
        prompt_rewriter.rewrite("Weather in New York.")
        print(prompt_rewriter.user_intent)
        if prompt_rewriter.url:
            print(prompt_rewriter.url)
        else:
            print(prompt_rewriter.search_query)
    """

    REWRITE_USER_PROMPT = Template(dedent("""
    This is the user's query for an AI web scraper that returns JSON data: "$user_prompt".
    Return a valid JSON object with three key-value pairs:
    - user_intent: A description of the kind of data the user expects.
    - navigation_method: Explain whether the user provided a valid URL or if we need to search Google.
    - url: If the user provided a specific URL (not just a generic domain but a full URL), write it here.
    - search_query: Google query for sites that contain the data the user requested as a text list.
                    Keep the search query simple and generic. Don't use the 'site:' operator.
                    Examples: User query: "Periodic table", Search query: "List of periodic table elements".
                    User query: "hidden gem movies last decade (at least title, director, genre, year)",
                    Search query: "List hidden gems movies last decade".
                    Always start the search query with "List" if applicable.
    The keys url and search_query are mutually exclusive, only one should be present.
    Today's date: $date
    """))

    def __init__(self) -> None:
        """ Creates a conversation. """
        model_request = OpenAiRequest(Gpt4o(), max_tokens=2048, json_response=True)
        self._conversation = Conversation(model_request)

    def rewrite(self, user_query: str) -> None:
        """ Returns the dictionary described in the prompt. """
        message = self.REWRITE_USER_PROMPT.substitute(user_prompt=user_query, date=date.today())
        self._conversation.add_text(message)
        answer = self._conversation.request_answer()
        return self._parse_answer(answer, user_query)

    def _parse_answer(self, answer: Dict[str, Any], user_query: str) -> Tuple[str, Optional[str], str]:
        """ Unpacks the values generated by the LLM. """
        user_intent = answer.get('user_intent', user_query)
        url = answer.get('url', None)
        search_query = answer.get('search_query', user_query)
        return user_intent, url, search_query
